import chalk from "chalk";
import path from "path";
import { InlineConfig, resolveConfig } from "../config";
import { parallel } from "gulp";
import imageTask from "./taskImage";
import jsonTask from "./taskJson";
import jsTask from "./taskJs";
import wxmlTask from "./taskWxml";
import wxsTask from "./taskWxs";
import wxssTask from "./taskWxss";
import { getBuildPackageTask } from "./init";
import { TaskOptions } from "../libs/options";
import extTask from "./ext";
import replace from "gulp-replace";
export interface BuildOptions {
  // /**
  //  * Base public path when served in production.
  //  * @deprecated `base` is now a root-level config option.
  //  */
  //  base?: string
  //  /**
  //   * Compatibility transform target. The transform is performed with esbuild
  //   * and the lowest supported target is es2015/es6. Note this only handles
  //   * syntax transformation and does not cover polyfills (except for dynamic
  //   * import)
  //   *
  //   * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,
  //   * transpile targeting browsers that natively support dynamic es module imports.
  //   * https://caniuse.com/es6-module-dynamic-import
  //   *
  //   * Another special value is 'esnext' - which only performs minimal transpiling
  //   * (for minification compat) and assumes native dynamic imports support.
  //   *
  //   * For custom targets, see https://esbuild.github.io/api/#target and
  //   * https://esbuild.github.io/content-types/#javascript for more details.
  //   */
  //  target?: 'modules' | TransformOptions['target'] | false
  //  /**
  //   * whether to inject dynamic import polyfill.
  //   * Note: does not apply to library mode.
  //   * @default false
  //   */
  //  polyfillDynamicImport?: boolean
  //  /**
  //   * Directory relative from `root` where build output will be placed. If the
  //   * directory exists, it will be removed before the build.
  //   * @default 'dist'
  //   */
  //  outDir?: string
  //  /**
  //   * Directory relative from `outDir` where the built js/css/image assets will
  //   * be placed.
  //   * @default 'assets'
  //   */
  //  assetsDir?: string
  //  /**
  //   * Static asset files smaller than this number (in bytes) will be inlined as
  //   * base64 strings. Default limit is `4096` (4kb). Set to `0` to disable.
  //   * @default 4096
  //   */
  //  assetsInlineLimit?: number
  //  /**
  //   * Whether to code-split CSS. When enabled, CSS in async chunks will be
  //   * inlined as strings in the chunk and inserted via dynamically created
  //   * style tags when the chunk is loaded.
  //   * @default true
  //   */
  //  cssCodeSplit?: boolean
  //  /**
  //   * If `true`, a separate sourcemap file will be created. If 'inline', the
  //   * sourcemap will be appended to the resulting output file as data URI.
  //   * 'hidden' works like `true` except that the corresponding sourcemap
  //   * comments in the bundled files are suppressed.
  //   * @default false
  //   */
  //  sourcemap?: boolean | 'inline' | 'hidden'
  //  /**
  //   * Set to `false` to disable minification, or specify the minifier to use.
  //   * Available options are 'terser' or 'esbuild'.
  //   * @default 'terser'
  //   */
  //  minify?: boolean | 'terser' | 'esbuild'
  //  /**
  //   * Options for terser
  //   * https://terser.org/docs/api-reference#minify-options
  //   */
  //  terserOptions?: Terser.MinifyOptions
  //  /**
  //   * Options for clean-css
  //   * https://github.com/jakubpawlowicz/clean-css#constructor-options
  //   */
  //  cleanCssOptions?: CleanCSS.Options
  //  /**
  //   * Will be merged with internal rollup options.
  //   * https://rollupjs.org/guide/en/#big-list-of-options
  //   */
  //  rollupOptions?: RollupOptions
  //  /**
  //   * Options to pass on to `@rollup/plugin-commonjs`
  //   */
  //  commonjsOptions?: RollupCommonJSOptions
  //  /**
  //   * Options to pass on to `@rollup/plugin-dynamic-import-vars`
  //   */
  //  dynamicImportVarsOptions?: RollupDynamicImportVarsOptions
  //  /**
  //   * Whether to write bundle to disk
  //   * @default true
  //   */
  //  write?: boolean
  //  /**
  //   * Empty outDir on write.
  //   * @default true when outDir is a sub directory of project root
  //   */
  //  emptyOutDir?: boolean | null
  //  /**
  //   * Whether to emit a manifest.json under assets dir to map hash-less filenames
  //   * to their hashed versions. Useful when you want to generate your own HTML
  //   * instead of using the one generated by Vite.
  //   *
  //   * Example:
  //   *
  //   * ```json
  //   * {
  //   *   "main.js": {
  //   *     "file": "main.68fe3fad.js",
  //   *     "css": "main.e6b63442.css",
  //   *     "imports": [...],
  //   *     "dynamicImports": [...]
  //   *   }
  //   * }
  //   * ```
  //   * @default false
  //   */
  //  manifest?: boolean
  //  /**
  //   * Build in library mode. The value should be the global name of the lib in
  //   * UMD mode. This will produce esm + cjs + umd bundle formats with default
  //   * configurations that are suitable for distributing libraries.
  //   */
  //  lib?: LibraryOptions | false
  //  /**
  //   * Produce SSR oriented build. Note this requires specifying SSR entry via
  //   * `rollupOptions.input`.
  //   */
  //  ssr?: boolean | string
  //  /**
  //   * Generate SSR manifest for determining style links and asset preload
  //   * directives in production.
  //   */
  //  ssrManifest?: boolean
  //  /**
  //   * Set to false to disable brotli compressed size reporting for build.
  //   * Can slightly improve build speed.
  //   */
  //  brotliSize?: boolean
  //  /**
  //   * Adjust chunk size warning limit (in kbs).
  //   * @default 500
  //   */
  //  chunkSizeWarningLimit?: number
  //  /**
  //   * Rollup watch options
  //   * https://rollupjs.org/guide/en/#watchoptions
  //   */
  //  watch?: WatcherOptions | null
}

export interface BuildOutput {}
/**
 * Bundles the app for production.
 * Returns a Promise containing the build result.
 */
export async function build(
  inlineConfig: InlineConfig = {}
): Promise<BuildOutput> {
  // parallelCallCounts++;
  try {
    return await doBuild(inlineConfig);
  } finally {
    // parallelCallCounts--;
    // if (parallelCallCounts <= 0) {
    //   await Promise.all(parallelBuilds.map((bundle) => bundle.close()));
    //   parallelBuilds.length = 0;
    // }
  }
}

async function doBuild(inlineConfig: InlineConfig = {}): Promise<BuildOutput> {
  const config = await resolveConfig(
    inlineConfig,
    "build",
    "default",
    "production"
  );
  console.log(config);

  // 格式通常为 /path/to/project/dist-agility-default-development
  const resolvedDestDir = path.resolve(config.determinedDestDir);
  console.log(chalk.red(`resolvedDestDir is ${resolvedDestDir}`));

  console.log(chalk.green(`config.ext:${config.ext}`));

  const taskOptions: TaskOptions = {
    destDir: config.determinedDestDir,
    resolvedConfig: config,
    plugins: [
      () => {
        return replace(/\[\[\w+\]\]/g, (match) => {
          const key = match.substring(2, match.length - 2);
          return (
            (typeof config.replacer === "function" && config.replacer(key)) ||
            match
          );
        });
      },
      ...config.plugins,
    ],
  };
  const tasks = parallel(
    getBuildPackageTask(taskOptions),
    // TODO: 这个任务的顺序问题，需要调整，放在这要考虑是否合理
    extTask(taskOptions),
    jsTask(taskOptions),
    jsonTask(taskOptions),
    // i18nTask,
    wxmlTask(taskOptions),
    wxssTask(taskOptions),
    wxsTask(taskOptions),
    imageTask(taskOptions)
    // watchTask,
  );
  /* const result =  */ await tasks((err) => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  });
  // console.log(chalk.red(`result:${result}`));
  return {};
}

export type ResolvedBuildOptions = Required<Omit<BuildOptions, "base">>;

export function resolveBuildOptions(raw?: BuildOptions): ResolvedBuildOptions {
  const resolved: ResolvedBuildOptions = {
    // target: "modules",
    // polyfillDynamicImport: false,
    // outDir: "dist",
    // assetsDir: "assets",
    // assetsInlineLimit: 4096,
    // cssCodeSplit: !raw?.lib,
    // sourcemap: false,
    // rollupOptions: {},
    // commonjsOptions: {
    //   include: [/node_modules/],
    //   extensions: [".js", ".cjs"],
    //   ...raw?.commonjsOptions,
    // },
    // dynamicImportVarsOptions: {
    //   warnOnError: true,
    //   exclude: [/node_modules/],
    //   ...raw?.dynamicImportVarsOptions,
    // },
    // minify: raw?.ssr ? false : "terser",
    // terserOptions: {},
    // cleanCssOptions: {},
    // write: true,
    // emptyOutDir: null,
    // manifest: false,
    // lib: false,
    // ssr: false,
    // ssrManifest: false,
    // brotliSize: true,
    // chunkSizeWarningLimit: 500,
    // watch: null,
    ...raw,
  };

  // // handle special build targets
  // if (resolved.target === "modules") {
  //   // Support browserslist
  //   // "defaults and supports es6-module and supports es6-module-dynamic-import",
  //   resolved.target = [
  //     "es2019",
  //     "edge88",
  //     "firefox78",
  //     "chrome87",
  //     "safari13.1",
  //   ];
  // } else if (resolved.target === "esnext" && resolved.minify === "terser") {
  //   // esnext + terser: limit to es2019 so it can be minified by terser
  //   resolved.target = "es2019";
  // }

  // // normalize false string into actual false
  // if ((resolved.minify as any) === "false") {
  //   resolved.minify = false;
  // }

  return resolved;
}
